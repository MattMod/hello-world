$time = Get-Date -Format "yyyyMMddHHmm"
Start-Transcript -Path "C:\posinstaller\logs\XStore_POS_Deploy.$time.log" -IncludeInvocationHeader -NoClobber

$INSTALLATION_TYPE=$args[0]
$XVERSION=$args[1]
$CUSTVERSION=$args[2]

function Update-PropertiesFile ([string]$key, [string]$value, [hashtable]$ht) {
  
    if ($ht.Contains($key)) { 
    	$ht[$key] = $value
    } else {
        Write-Error "Property: '$key' not present into file."
	return
    }
}

function Insert-PropertiesFile ([string]$key, [string]$value, [hashtable]$ht) {
  
    if (-not ($ht.Contains($key)) ) { 
    	$ht.Add($key, $value)
	    Write-Output "Property: '$key' inserted with value '$value'"
    } else {
    	if ( ($null -eq $ht[$key]) -or ($ht[$key] -eq '') ) {
            $ht[$key] = $value
            Write-Output "Property: '$key' updated with value '$value' "
        } elseif ( $ht[$key] -eq $value ) {
            Write-Output "Property: '$key' is already present into file with value '$value'."
        } else {
            Write-Error "Property: '$key' is already present into file with different value: '$($ht[$key])'."
            return
        }
    }
}

IF ($INSTALLATION_TYPE -eq 'install') {

	#STOP APPLICATION
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.anchor") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.anchor"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.pid") 	 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.pid"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.status") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.status"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.anchor") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.anchor"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.pid") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.pid"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.status") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.status"}
	#END STOP APPLICATION

	#VERIFY LISTNER STATUS
	$running=(Get-Service | Where-Object {$_.Status -eq "Running"}).Name
	$stopped=(Get-Service | Where-Object {$_.Status -eq "Stopped"}).Name
#	echo "=> RUNNING SERVICES -------"
#	$running
#	echo "---------------------------"
#	echo "=> STOPPED SERVICES -------"
#	$stopped
#	echo "---------------------------"
	
	if (-not ($running -contains "OracleServiceXSTORE") ) {
		if ($stopped -contains "OracleServiceXSTORE") {
			$startmode=(Get-CimInstance win32_service | Where-Object Name -eq "OracleServiceXSTORE").StartMode
			if ($startmode -ieq 'disabled') {
				Set-Service OracleServiceXSTORE -StartupType manual
				Start-Service OracleServiceXSTORE
			} else {
				Start-Service OracleServiceXSTORE
			}
		} else {
			Write-Error "Service 'OracleServiceXSTORE' not available. Installation STOPPED!"
		}
	}

	if (-not ($running -contains "OracleOraDB19Home1TNSListener") ) {
		if ($stopped -contains "OracleOraDB19Home1TNSListener") {
			$startmode=(Get-CimInstance win32_service | Where-Object Name -eq "OracleOraDB19Home1TNSListener").StartMode
			if ($startmode -ieq 'disabled') {
				Set-Service OracleOraDB19Home1TNSListener -StartupType manual
				Start-Service OracleOraDB19Home1TNSListener
			} else {
				Start-Service OracleOraDB19Home1TNSListener
			}
		} else {
			Write-Error "Service 'OracleOraDB19Home1TNSListener' not available. Installation STOPPED!"
		}
	}
	#END VERIFY LISTENER STATUS

	#XSTORE INSTALLATION
	$REPXVERSION = $XVERSION.replace('.', '_')
	$REPCUSTVERSION = $CUSTVERSION.replace('.', '_')
	$literalpath = "C:\posinstaller\artifacts\OracleRetailXstorePointofService_$REPXVERSION"+"_AMP_$REPCUSTVERSION.zip"
	Expand-Archive -LiteralPath $literalpath -DestinationPath C:\posinstaller\artifacts
	
	if ( (-not (Test-Path "HKLM:\Software\XStorePOS\xstore")) -or ($(Get-ItemPropertyValue -Path "HKLM:\Software\XStorePOS\xstore" -Name "Version") -ne "$XVERSION"+"_$CUSTVERSION") ) {

		$path = "C:\posinstaller\artifacts\$XVERSION"+"_$CUSTVERSION\pos"
		Set-Location -Path $path
		Copy-Item "xstore-$XVERSION-$CUSTVERSION-0.0-AMP-pos-install.jar" -Destination "C:\posinstaller\xstore"
		Copy-Item "ant.install.properties" -Destination "C:\posinstaller\xstore"
		#CHANGE PROPERTIES VALUE OF PROPERTIES FILE FOUND IN THE ARTIFACT
		Set-Location -Path C:\posinstaller\xstore
        	$hostname = & hostname
		$MAPPING_FILE_LOCATION = "C:\posinstaller\xstore\xstore.mapping.properties"
		$HOSTNAME_FILE_LOCATION = "C:\posinstaller\xstore\$hostname.properties"
		$ANT_CONF_FILE_LOCATION = "C:\posinstaller\xstore\ant.install.properties"
		$map_ht = ConvertFrom-StringData (Get-Content -Raw $MAPPING_FILE_LOCATION)
		$host_ht = ConvertFrom-StringData (Get-Content -Raw $HOSTNAME_FILE_LOCATION)
		$ant_ht = ConvertFrom-StringData (Get-Content -Raw $ANT_CONF_FILE_LOCATION)
		$ant_upd_ht = ConvertFrom-StringData (Get-Content -Raw $ANT_CONF_FILE_LOCATION)
		
		Write-Output "==> START XSTORE PROPERTIES UPDATE"
                foreach ($k in $ant_ht.Keys) {
                    #Write-Output "==> CICLING $k"
                    if ($map_ht.Contains($k)) {
                        $newkey = $map_ht[$k]
                        if ($host_ht.Contains($newkey)) {
                            if ($host_ht[$newkey] -ne "") {
                                #Write-Output "==> UPDATE WITH MAPPED KEY: '$newkey'"
                	        Update-PropertiesFile $k $host_ht[$newkey] $ant_upd_ht
                	    } else {
                	        Write-Error "The value of the mapped key '$newkey' in the '$hostname.properties' file is blank."
                	    }
                        } else {
                            Write-Error "The '$hostname.properties' file doesn't contain the mapped key: $newkey."
                        }
                    } else {
                        if ($host_ht.Contains($k)) {
                            if ($host_ht[$k] -ne "") {
                                #Write-Output "==> UPDATE: key '$k'"
                                Update-PropertiesFile $k $host_ht[$k] $ant_upd_ht
                            } else {
                                Write-Warning "The value of the key '$k' in the '$hostname.properties' file is blank."
                            }
                        }
                    }
                }
                Set-Content $ANT_CONF_FILE_LOCATION -Value $( 
                    foreach ($k in $ant_upd_ht.Keys) {
                	'{0} = {1}' -f $k, $ant_upd_ht[$k].Replace('\', '\\').Replace(':', '\:').Replace('=', '\=')
                    }
                )
		Write-Output "==> END XSTORE PROPERTIES UPDATE"
		#END CHANGE PROPERTIES VALUE OF PROPERTIES FILE FOUND IN THE ARTIFACT
		#INSTALLATION
		Write-Output "==> START XSTORE INSTALLATION"
		C:\jre\bin\java.exe -jar xstore-$XVERSION-$CUSTVERSION-0.0-AMP-pos-install.jar
		Write-Output "==> END XSTORE INSTALLATION"
		#END INSTALLATION
		#CHECK SUCCESSFUL LOG INSTALLATION
		$log_result=Select-String -Path C:\posinstaller\xstore\ant.install.log -Pattern ' SUCCESS ' -CaseSensitive -Quiet
		if ($log_result -eq "True") {
			$version = "$XVERSION"+"_$CUSTVERSION"
			Set-Location -Path "HKLM:\"
			if ( -not (Test-Path "HKLM:\Software\XStorePOS\xstore") ) {
				if ( -not (Test-Path "HKLM:\Software\XStorePOS") ) { New-Item -Path "HKLM:\Software\" -Name "XStorePOS" -ItemType "directory" }
				New-Item -Path "HKLM:\Software\XStorePOS\" -Name "xstore" -ItemType "directory"
				New-ItemProperty -Path "HKLM:\Software\XStorePOS\xstore" -Name "Version" -Value "$version" -PropertyType "String"
			} elseif ( $(Get-ItemProperty -Path "HKLM:\Software\XStorePOS\xstore" -Name "Version") ) {
				if ($(Get-ItemPropertyValue -Path "HKLM:\Software\XStorePOS\xstore" -Name "Version") -ne "$XVERSION"+"_$CUSTVERSION") {
					Set-ItemProperty -Path "HKLM:\Software\XStorePOS\xstore" -Name "Version" -Value "$version"
				}
			} else {
				New-ItemProperty -Path "HKLM:\Software\XStorePOS\xstore" -Name "Version" -Value "$version" -PropertyType "String"
			}
			Write-Output "==> XSTORE INSTALLATION SUCCESSFUL"
		} else {
			Write-Error "==> XSTORE INSTALLATION FAILED"
		}
		#END CHECK SUCCESSFUL LOG INSTALLATION
		
	} else {
		if (Get-ItemProperty -Path "HKLM:\Software\XStorePOS\xstore" -Name "Version") {
			if ($(Get-ItemPropertyValue -Path "HKLM:\Software\XStorePOS\xstore" -Name "Version") -eq "$XVERSION"+"_$CUSTVERSION") {
				Write-Output "==> THIS XSTORE RELEASE IS ALREADY INSTALLED!"
			} else {
				Write-Error "PLEASE CHECK AND DELETE MANUALLY XSTOREPOS REGISTRY KEYS LOCATION 'HKLM:\Software\XStorePOS\xstore'; THEN RERUN INSTALLATION."
			}
		} elseif (Test-Path "HKLM:\Software\XStorePOS") {
			Write-Error "PLEASE CHECK AND DELETE MANUALLY XSTOREPOS REGISTRY KEYS LOCATION 'HKLM:\Software\XStorePOS\xstore'; THEN RERUN INSTALLATION."
		}
	}
	
	#STOP XSTORE
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.anchor") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.anchor"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.pid") 	 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.pid"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.status") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.status"}
	#END STOP XSTORE
	#END XSTORE INSTALLATION

	#XENVIRONMENT INSTALLATION
	if ( (-not (Test-Path -Path "HKLM:\Software\XStorePOS\xenvironment")) -or ($(Get-ItemPropertyValue -Path "HKLM:\Software\XStorePOS\xenvironment" -Name "Version") -ne "$XVERSION"+"_$CUSTVERSION") ) {

		$path = "C:\posinstaller\artifacts\$XVERSION"+"_$CUSTVERSION\xenvironment"
		Set-Location -Path $path
		Copy-Item "xenvironment-$XVERSION-$CUSTVERSION-0.0-AMP-install.jar" -Destination "C:\posinstaller\xenvironment"
		Copy-Item "ant.install.properties" -Destination "C:\posinstaller\xenvironment"
		#CHANGE PROPERTIES VALUE OF PROPERTIES FILE FOUND IN THE ARTIFACT
		Set-Location -Path C:\posinstaller\xenvironment
        	$hostname = & hostname
		$MAPPING_FILE_LOCATION = "C:\posinstaller\xenvironment\xenvironment.mapping.properties"
		$HOSTNAME_FILE_LOCATION = "C:\posinstaller\xenvironment\$hostname.properties"
		$ANT_CONF_FILE_LOCATION = "C:\posinstaller\xenvironment\ant.install.properties"
		$map_ht = ConvertFrom-StringData (Get-Content -Raw $MAPPING_FILE_LOCATION)
		$host_ht = ConvertFrom-StringData (Get-Content -Raw $HOSTNAME_FILE_LOCATION)
		$ant_ht = ConvertFrom-StringData (Get-Content -Raw $ANT_CONF_FILE_LOCATION)
		$ant_upd_ht = ConvertFrom-StringData (Get-Content -Raw $ANT_CONF_FILE_LOCATION)
		
		Write-Output "==> START XENVIRONMENT PROPERTIES UPDATE"
                foreach ($k in $ant_ht.Keys) {
                    #Write-Output "==> CICLING $k"
                    if ($map_ht.Contains($k)) {
                        $newkey = $map_ht[$k]
                        if ($host_ht.Contains($newkey)) {
                            if ($host_ht[$newkey] -ne "") {
                                #Write-Output "==> UPDATE WITH MAPPED KEY: '$newkey'"
                	        Update-PropertiesFile $k $host_ht[$newkey] $ant_upd_ht
                	    } else {
                	        Write-Error "The value of the mapped key '$newkey' in the '$hostname.properties' file is blank."
                	    }
                        } else {
                            Write-Error "The '$hostname.properties' file doesn't contain the mapped key: $newkey."
                        }
                    } else {
                        if ($host_ht.Contains($k)) {
                            if ($host_ht[$k] -ne "") {
                                #Write-Output "==> UPDATE: key '$k'"
                                Update-PropertiesFile $k $host_ht[$k] $ant_upd_ht
                            } else {
                                Write-Warning "The value of the key '$k' in the '$hostname.properties' file is blank."
                            }
                        }
                    }
                }
                Set-Content $ANT_CONF_FILE_LOCATION -Value $( 
                    foreach ($k in $ant_upd_ht.Keys) {
                	'{0} = {1}' -f $k, $ant_upd_ht[$k].Replace('\', '\\').Replace(':', '\:').Replace('=', '\=')
                    }
                )
		Write-Output "==> END XENVIRONMENT PROPERTIES UPDATE"
		#END CHANGE PROPERTIES VALUE OF PROPERTIES FILE FOUND IN THE ARTIFACT
		#INSTALLATION
		Write-Output "==> START XENVIRONMENT INSTALLATION"
		C:\jre\bin\java.exe -jar xenvironment-$XVERSION-$CUSTVERSION-0.0-AMP-install.jar
		Write-Output "==> END XENVIRONMENT INSTALLATION"
		#END INSTALLATION
		#CHECK SUCCESSFUL LOG INSTALLATION
		$log_result=Select-String -Path C:\posinstaller\xenvironment\ant.install.log -Pattern ' SUCCESS ' -CaseSensitive -Quiet
		if ($log_result -eq "True") {
			$version = "$XVERSION"+"_$CUSTVERSION"
			Set-Location -Path "HKLM:\"
			if ( -not (Test-Path "HKLM:\Software\XStorePOS\xenvironment") ) {
				if (-not (Test-Path "HKLM:\Software\XStorePOS") ) { New-Item -Path "HKLM:\Software\" -Name "XStorePOS" -ItemType "directory" }
				New-Item -Path "HKLM:\Software\XStorePOS\" -Name "xenvironment" -ItemType "directory"
				New-ItemProperty -Path "HKLM:\Software\XStorePOS\xenvironment" -Name "Version" -Value "$version" -PropertyType "String"
			} elseif ( Get-ItemProperty -Path "HKLM:\Software\XStorePOS\xenvironment" -Name "Version" ) {
				if ($(Get-ItemPropertyValue -Path "HKLM:\Software\XStorePOS\xenvironment" -Name "Version") -ne "$XVERSION"+"_$CUSTVERSION") {
					Set-ItemProperty -Path "HKLM:\Software\XStorePOS\xenvironment" -Name "Version" -Value "$version"
				}
			} else {
				New-ItemProperty -Path "HKLM:\Software\XStorePOS\xenvironment" -Name "Version" -Value "$version" -PropertyType "String"
			}
			Write-Output "==> XENVIRONMENT INSTALLATION SUCCESSFUL"
		} else {
			Write-Error "==> XENVIRONMENT INSTALLATION FAILED"
		}
		#END SUCCESSFUL LOG INSTALLATION

	} else {
		if (Get-ItemProperty -Path "HKLM:\Software\XStorePOS\xenvironment" -Name "Version") {
			if ($(Get-ItemPropertyValue -Path "HKLM:\Software\XStorePOS\xenvironment" -Name "Version") -eq "$XVERSION"+"_$CUSTVERSION") {
				Write-Output "==> THIS XENVIRONMENT RELEASE IS ALREADY INSTALLED!"
			} else {
				Write-Error "PLEASE CHECK AND DELETE MANUALLY XSTOREPOS REGISTRY KEYS LOCATION 'HKLM:\Software\XStorePOS\xenvironment'; THEN RERUN INSTALLATION."
			}
		}
	}
	
	#STOP XENVIRONMENT
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.anchor") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.anchor"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.pid") 	 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.pid"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.status") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.status"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.anchor") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.anchor"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.pid") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.pid"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.status") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.status"}
	#END STOP XENVIRONMENT
	#END XENVIRONMENT INSTALLATION

	#LOADING MNTs
    	Set-Location -Path C:\posinstaller\mnt
    	$key = 'dtv.location.StoreNumber'
    	$hostname = & hostname
    	$HOSTNAME_FILE_LOCATION = "C:\posinstaller\xstore\$hostname.properties"
    	$host_ht = ConvertFrom-StringData (Get-Content -Raw $HOSTNAME_FILE_LOCATION)
	$store = $host_ht[$key]
    	$mnt = "store_"+"$store"+"_install"
	$literalpath = "C:\posinstaller\mnt\$mnt.zip"
	Expand-Archive -LiteralPath $literalpath -DestinationPath "C:\PROGRA~1\app\xstore\download" -Force
	Set-Location -Path "C:\PROGRA~1\app\xstore"
	
	Write-Output "==> STARTING MNTS DATALOADER"
	Start-Process -FilePath ".\dataloader2.bat" -NoNewWindow -Wait
	
	$attempt = 1
	while ($attempt -le 6) {
		Write-Output "==> Attempt: $attempt"
		if (Test-Path -Path "C:\PROGRA~1\app\xstore\download\success.dat") {
			Write-Output "==> MNTs LOAD SUCCESSFUL"
			$attempt = 7
		} elseif (Test-Path -Path "C:\PROGRA~1\app\xstore\download\failures.dat") {
			Write-Error "==> MNTs LOAD FAILED"
		} elseif ($attempt -eq 6) {
			Write-Error "==> MNTs LOAD FAILED: too many attempts. Check manually."
		} else {
			Start-Sleep -Seconds 60
			$attempt++
		}
	}
	#END LOADING MNTs

    	#CHANGING XSTORE CONFIGURATION
    	#STOP APPLICATION
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.anchor") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.anchor"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.pid") 	 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.pid"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.status") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.status"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.anchor") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.anchor"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.pid") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.pid"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.status") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.status"}
	#END STOP APPLICATION

    	Copy-Item $HOSTNAME_FILE_LOCATION -Destination "C:\Program Files\app\xstore\updates"
    	if (Test-Path -Path "C:\Program Files\app\xstore\updates\xstore.properties") 	{Remove-Item -Path "C:\Program Files\app\xstore\updates\xstore.properties"}
    	Rename-Item -Path "C:\Program Files\app\xstore\updates\$hostname.properties" -NewName "xstore.properties"
    	if (Test-Path -Path "C:\Program Files\app\xstore\lib\*.tmp") 	{Remove-Item -Path "C:\Program Files\app\xstore\lib\*.tmp" -Force}
    	Set-Location -Path "C:\PROGRA~1\app\xstore"
	Write-Output "==> STARTING BASECONFIGURE"
    	Start-Process -FilePath ".\baseconfigure.bat" -NoNewWindow -Wait
	Write-Output "==> STARTING CONFIGURE"
    	Start-Process -FilePath ".\configure.bat" -NoNewWindow -Wait
    	#CHECK EXECUTION RESULT
    	if (Test-Path -Path "C:\Program Files\app\xstore\lib\*.tmp") 	{Write-Error "Error: Changing XStore configuration FAILED!"}
    	#END CHECK EXECUTION RESULT
    	#END CHANGING XSTORE CONFIGURATION
	
	#XUNIT CONFIGURATION
	Set-Location -Path "C:\Program Files\app\xstore"
	$xunit = ":test"
	$CONFIG_FILE_LOCATION = '.\configPath.properties'
	$config_ht = ConvertFrom-StringData (Get-Content -Raw $CONFIG_FILE_LOCATION)
	$key = "xstore.config.path.base.features"
	if ($config_ht.Contains($key)) {
		$value = $config_ht[$key]+$xunit
		Update-PropertiesFile $key $value $config_ht

		Set-Content $CONFIG_FILE_LOCATION -Value $( 
    		    foreach ($key in $config_ht.Keys) {
    			'{0} = {1}' -f $key, $config_ht[$key].Replace('\', '\\')
    		    }
		)
	} else {
		Write-Error "Property 'xstore.config.path.base.features' not found."
	}

	$SYS_FILE_LOCATION = '.\system.properties'
	$sys_ht = ConvertFrom-StringData (Get-Content -Raw $SYS_FILE_LOCATION)
	Insert-PropertiesFile "xunit.tags.enabled" "SAMPLE_XUNIT_TESTS" $sys_ht
	Insert-PropertiesFile "xunit.autorun" "true" $sys_ht
	Insert-PropertiesFile "xunit.noreceipts" "true" $sys_ht
	Insert-PropertiesFile "xunit.delay" "1000" $sys_ht

	Set-Content $SYS_FILE_LOCATION -Value $( 
    	foreach ($key in $sys_ht.Keys) {
    		'{0} = {1}' -f $key, $sys_ht[$key].Replace('\', '\\')
    	}
	)
	#END XUNIT CONFIGURATION
	
	#START APPLICATION
	Set-Location -Path "C:\Program Files\app\environment"
	Write-Output "==> STARTING APPLICATION"
	Start-Process -FilePath ".\start_eng.bat"
	#END START APPLICATION

	#XUNIT RESULTS
#	Write-Output "==> CHECKING XUNIT RESULTS"
#	$x = 0
#	while($true) {
#		if ($x -lt 3) {
#			if (-not (Test-Path -Path "C:\Program Files\app\xstore\log\xunit.out")) {
#				Start-Sleep -s 10
#				$x++
#			} else {
#				Write-Output "File 'xunit.out' created."
#				break
#			}			
#		} else {
#			Write-Error "File 'xunit.out' not created."
#		}
#	}
#
#	$y = 1
#	while($true) {
#		if ($y -lt 4) {
#			if (Select-String -Path "C:\Program Files\app\xstore\log\xunit.out" -Pattern " STOPPING XUNIT " -CaseSensitive -Quiet) {
#				if (Select-String -Path "C:\Program Files\app\xstore\log\xunit.out" -Pattern "*TEST CASE FAILED" -CaseSensitive -Quiet) {
#					Write-Error "Some Test Case FAILED: check XUnit execution."
#				} else {
#					Write-Output "Test Cases executed SUCCESSFULLY."
#					break
#				}
#			} else {
#				Write-Output "Waiting for XUnit Tests: Attempt $y..."
#				Start-Sleep -s 180
#				$y++
#			}
#			
#		} else {
#			Write-Error "Too many attempts: check XUnit execution."
#		}
#	}
	#END XUNIT RESULTS

	EXIT
	
} ELSE { #UPDATE
	
    	#STOP APPLICATION
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.anchor") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.anchor"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.pid") 	 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.pid"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.status") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.status"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.anchor") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.anchor"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.pid") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.pid"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.status") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.status"}
	#END STOP APPLICATION

	#VERIFY LISTNER STATUS
	$running=(Get-Service | Where-Object {$_.Status -eq "Running"}).Name
	$stopped=(Get-Service | Where-Object {$_.Status -eq "Stopped"}).Name
#	echo "=> RUNNING SERVICES -------"
#	$running
#	echo "---------------------------"
#	echo "=> STOPPED SERVICES -------"
#	$stopped
#	echo "---------------------------"
	
	if (-not ($running -contains "OracleServiceXSTORE") ) {
		if ($stopped -contains "OracleServiceXSTORE") {
			$startmode=(Get-CimInstance win32_service | Where-Object Name -eq "OracleServiceXSTORE").StartMode
			if ($startmode -ieq 'disabled') {
				Set-Service OracleServiceXSTORE -StartupType manual
				Start-Service OracleServiceXSTORE
			} else {
				Start-Service OracleServiceXSTORE
			}
		} else {
			Write-Error "Service 'OracleServiceXSTORE' not available. Update STOPPED!"
		}
	}

	if (-not ($running -contains "OracleOraDB19Home1TNSListener") ) {
		if ($stopped -contains "OracleOraDB19Home1TNSListener") {
			$startmode=(Get-CimInstance win32_service | Where-Object Name -eq "OracleOraDB19Home1TNSListener").StartMode
			if ($startmode -ieq 'disabled') {
				Set-Service OracleOraDB19Home1TNSListener -StartupType manual
				Start-Service OracleOraDB19Home1TNSListener
			} else {
				Start-Service OracleOraDB19Home1TNSListener
			}
		} else {
			Write-Error "Service 'OracleOraDB19Home1TNSListener' not available. Update STOPPED!"
		}
	}
	#END VERIFY LISTENER STATUS

    	#XSTORE UPDATE
	Set-Location -Path "HKLM:\"
	if (Test-Path .\Software\XStorePOS\xstore) {
		if (($(Get-ItemPropertyValue -Path 'HKLM:\Software\XStorePOS\xstore\' -Name Version) -ne "$XVERSION"+"_$CUSTVERSION")) {

			$REPXVERSION = $XVERSION.replace('.', '_')
			$REPCUSTVERSION = $CUSTVERSION.replace('.', '_')
			$literalpath = "C:\posinstaller\artifacts\OracleRetailXstorePointofService_$REPXVERSION"+"_AMP_$REPCUSTVERSION.zip"
			Expand-Archive -LiteralPath $literalpath -DestinationPath C:\posinstaller\artifacts
			$path = "C:\posinstaller\artifacts\$XVERSION"+"_$CUSTVERSION\pos"
			Set-Location -Path $path
			Copy-Item "xstore-$XVERSION-$CUSTVERSION-0.0-AMP-pos-update.jar" -Destination "C:\posinstaller\xstore"

			#UPDATE
    	    		Set-Location -Path "C:\posinstaller\xstore"
			C:\jre\bin\java.exe -jar xstore-$XVERSION-$CUSTVERSION-0.0-AMP-pos-update.jar
			#END UPDATE
			#CHECK SUCCESSFUL LOG UPDATE
			$log_result=Select-String -Path C:\posinstaller\xstore\ant.install.log -Pattern ' SUCCESS ' -CaseSensitive -Quiet
			if ($log_result -eq "True") {
				$version = "$XVERSION"+"_$CUSTVERSION"
				Set-ItemProperty -Path "HKLM:\Software\XStorePOS\xstore" -Name "Version" -Value "$version"
				Write-Output "==> XSTORE UPDATE SUCCESSFUL"
			} ELSE {
				Write-Error "XSTORE UPDATE FAILED!"
			}
			#END CHECK SUCCESSFUL LOG UPDATE

		} else {
			Write-Output "==> XSTORE IS UP TO DATE!"
		}
	} else {
		Write-Error "XSTORE IS NOT ALREADY INSTALLED! Please check the 'HKLM:\Software\XStorePOS\xstore' registry key."
	}
	
	#STOP XSTORE
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.anchor") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.anchor"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.pid") 	 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.pid"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.status") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.status"}
	#END STOP XSTORE
	#END XSTORE UPDATE

    	#XENVIRONMENT UPDATE
	Set-Location -Path "HKLM:\"
	if (Test-Path .\Software\XStorePOS\xenvironment) {
		if (($(Get-ItemPropertyValue -Path 'HKLM:\Software\XStorePOS\xenvironment' -Name Version) -ne "$XVERSION"+"_$CUSTVERSION")) {

			$path = "C:\posinstaller\artifacts\$XVERSION"+"_$CUSTVERSION\xenvironment"
			Set-Location -Path $path
			Copy-Item "xenvironment-$XVERSION-$CUSTVERSION-0.0-AMP-upgrade.jar" -Destination "C:\posinstaller\xenvironment"

			#UPDATE
			Set-Location -Path "C:\posinstaller\xenvironment"
			C:\jre\bin\java.exe -jar xenvironment-$XVERSION-$CUSTVERSION-0.0-AMP-upgrade.jar
			#END UPDATE
			#CHECK SUCCESSFUL LOG UPDATE
			$log_result=Select-String -Path C:\posinstaller\xenvironment\ant.install.log -Pattern ' SUCCESS ' -CaseSensitive -Quiet
			if ($log_result -eq "True") {
				$version = "$XVERSION"+"_$CUSTVERSION"
				Set-ItemProperty -Path "HKLM:\Software\XStorePOS\xenvironment" -Name "Version" -Value "$version"
				Write-Output "==> XENVIRONMENT UPDATE SUCCESSFUL"
			} else {
				Write-Error "==> XENVIRONMENT UPDATE FAILED!"
			}
			#END SUCCESSFUL LOG UPDATE

		} else {
			Write-Output "==> XENVIRONMENT IS UP TO DATE!"
		}
	} else {
		Write-Error "XENVIRONMENT IS NOT ALREADY INSTALLED! Please check the 'HKLM:\Software\XStorePOS\xenvironment' registry key"
	}
	
	#STOP XENVIRONMENT
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.anchor") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.anchor"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.pid") 	 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.pid"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.status") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.status"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.anchor") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.anchor"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.pid") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.pid"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.status") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.status"}
	#END STOP XENVIRONMENT
	#END XENVIRONMENT UPDATE

    	#LOADING MNTs
        Set-Location -Path C:\posinstaller\mnt
        $key = 'dtv.location.StoreNumber'
        $hostname = & hostname
        $HOSTNAME_FILE_LOCATION = "C:\posinstaller\xstore\$hostname.properties"
        $host_ht = ConvertFrom-StringData (Get-Content -Raw $HOSTNAME_FILE_LOCATION)
	$store = $host_ht[$key]
        $mnt = "store_"+"$store"+"_update"
	$literalpath = "C:\posinstaller\mnt\$mnt.zip"
	Expand-Archive -LiteralPath $literalpath -DestinationPath "C:\PROGRA~1\app\xstore\download" -Force
	Set-Location -Path "C:\PROGRA~1\app\xstore"
	
	Write-Output "==> STARTING MNTS DATALOADER"
	Start-Process -FilePath ".\dataloader2.bat" -NoNewWindow -Wait
	
	$attempt = 1
	while ($attempt -le 6) {
		Write-Output "==> Attempt: $attempt"
		if (Test-Path -Path "C:\PROGRA~1\app\xstore\download\success.dat") {
			Write-Output "==> MNTs LOAD SUCCESSFUL"
			$attempt = 7
		} elseif (Test-Path -Path "C:\PROGRA~1\app\xstore\download\failures.dat") {
			Write-Error "==> MNTs LOAD FAILED"
		} elseif ($attempt -eq 6) {
			Write-Error "==> MNTs LOAD FAILED: too many attempts. Check manually."
		} else {
			Start-Sleep -Seconds 60
			$attempt++
		}
	}
	#END LOADING MNTs

    	#CHANGING XSTORE CONFIGURATION
        #STOP APPLICATION
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.anchor") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.anchor"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.pid") 	 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.pid"}
	if (Test-Path -Path "C:\Program Files\app\xstore\tmp\*.status") 	{Remove-Item -Path "C:\Program Files\app\xstore\tmp\*.status"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.anchor") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.anchor"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.pid") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.pid"}
	if (Test-Path -Path "C:\Program Files\app\xenvironment\tmp\*.status") 	{Remove-Item -Path "C:\Program Files\app\xenvironment\tmp\*.status"}
	#END STOP APPLICATION

        Copy-Item $HOSTNAME_FILE_LOCATION -Destination "C:\Program Files\app\xstore\updates"
        if (Test-Path -Path "C:\Program Files\app\xstore\updates\xstore.properties") 	{Remove-Item -Path "C:\Program Files\app\xstore\updates\xstore.properties"}
        Rename-Item -Path "C:\Program Files\app\xstore\updates\$hostname.properties" -NewName "xstore.properties"
        if (Test-Path -Path "C:\Program Files\app\xstore\lib\*.tmp") 	{Remove-Item -Path "C:\Program Files\app\xstore\lib\*.tmp" -Force}
        Set-Location -Path "C:\PROGRA~1\app\xstore"
	Write-Output "==> STARTING BASECONFIGURE"
        Start-Process -FilePath ".\baseconfigure.bat" -NoNewWindow -Wait
	Write-Output "==> STARTING CONFIGURE"
        Start-Process -FilePath ".\configure.bat" -NoNewWindow -Wait
        #CHECK EXECUTION RESULT
        if (Test-Path -Path "C:\Program Files\app\xstore\lib\*.tmp") 	{Write-Error "Error: Changing XStore configuration FAILED!"}
        #END CHECK EXECUTION RESULT
        #END CHANGING XSTORE CONFIGURATION
}

Stop-Transcript
