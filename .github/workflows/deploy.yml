name: Deploy

on:
  workflow_dispatch:
    inputs:
      versionName:
        description: 'Name of version  (ie 5.5.0)'
        required: true
      branchName:
        description: 'Name of branch to deploy'
        required: true
#      destinationEnv:
#        description: 'Name of destination Branch'
#        required: true
        
jobs:
  GetDownloadURL:
    runs-on: ubuntu-latest
    
    outputs:
      url: ${{ steps.url.outputs.URL }}
    
    steps:
      - name: Set current artifact name
        id: current-artifact
        run: |
              echo "::set-output name=CURRENT_ARTIFACT::$(echo XStore_${{ github.event.inputs.branchName }}_${{ github.event.inputs.versionName }})"
      
      - name: Get latest artifact id
        id: max_id
        run: |
              echo "::set-output name=MAX_ID::$(curl -fs https://api.github.com/repos/${{github.repository}}/actions/artifacts |
              jq '[ .artifacts[] | select(.name == "XStore_${{ github.event.inputs.branchName }}_${{ github.event.inputs.versionName }}" and .expired == false) | .id ] | max')
              
      - name: Get lastest artifact url
        id: url
        run: |
              echo "::set-output name=URL::$(curl -fs https://api.github.com/repos/${{github.repository}}/actions/artifacts |
              jq '.artifacts[] | select(.id == ${{ steps.max_id.outputs.MAX_ID }} and .expired == false) | .archive_download_url')
        
      
  DeployXOffice:
    runs-on: ubuntu-latest
    needs: GetDownloadURL
    
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: 'true'
      - name: Download Artifact
        if: ${{needs.GetDownloadURL.outputs.url}} != ""
        run: |
              
              
      - name: Deploy with PowerShell
        if: ${{needs.GetDownloadURL.outputs.url}} != ""
        shell: pwsh
        run: .\bat_scripts\setup.bat ${{ github.event.inputs.versionName }} ${{ github.event.inputs.branchName }} # ${{ github.event.inputs.destinationEnv }}  # "./bat_scripts/test.bat" also can work
      
  DeployXStore:
    runs-on: windows-latest
    needs: [GetDownloadURL, DeployXOffice]
    
    steps:
      - uses: actions/checkout@v2
        with:
           lfs: 'true'
      - name: Download Artifact
        if: ${{needs.GetDownloadURL.outputs.url}} != ""
        run: |
        
        
      - name: Deploy with PowerShell
        if: ${{needs.GetDownloadURL.outputs.url}} != ""
        shell: pwsh
        run: .\bat_scripts\setup.bat ${{ github.event.inputs.versionName }} ${{ github.event.inputs.branchName }} # ${{ github.event.inputs.destinationEnv }}  # "./bat_scripts/test.bat" also can work
      - name: XUnit Test with PowerShell
        if: ${{needs.GetDownloadURL.outputs.url}} != ""
        shell: pwsh
        run: .\bat_scripts\xunit_test.bat # "./bat_scripts/test.bat" also can work
